$flexboxgrid-breakpoints: xxs $screen-XXS,
xs $screen-XS,
s $screen-S,
m $screen-M,
l $screen-L,
xl $screen-XL;

$gutter-compensation: $flexboxgrid-gutter-width * .5 * -1;
$half-gutter-width: $flexboxgrid-gutter-width * .5;

.flex-row {
  box-sizing: border-box;
  @include flexbox();
  @include flex(0, 1, auto);
  @include flex-direction(row);
  @include flex-wrap(wrap);
  margin-right: $gutter-compensation;
  margin-left: $gutter-compensation;
}

.flex-row.reverse {
  @include flex-direction(row-reverse);
}

.flex-col.reverse {
  @include flex-direction(column-reverse);
}

@mixin flexboxgrid-sass-col-common {
  box-sizing: border-box;

  // split @include flex(0, 0, auto) into individual props
  @include flex-grow(0);
  @include flex-shrink(0);

  // we leave @include flex-basis(auto) out of common because
  // in some spots we need it and some we dont
  // more why here: https://github.com/kristoferjoseph/flexboxgrid/issues/126

  padding-right: $half-gutter-width;
  padding-left: $half-gutter-width;
}

$name: nth($flexboxgrid-breakpoints, 1);
.flex-col {
  @include flexboxgrid-sass-col-common;
  @include flex-basis(auto);
}

@for $i from 1 through $flexboxgrid-grid-columns {
  .flex-col-#{$i} {
    @include flexboxgrid-sass-col-common;
    @include flex-basis(100% / $flexboxgrid-grid-columns * $i);
    max-width: 100% / $flexboxgrid-grid-columns * $i;
  }
}

@for $i from 0 through $flexboxgrid-grid-columns {
  .flex-col-offset-#{$i} {
    @include flexboxgrid-sass-col-common;
    @if $i == 0 {
      margin-left: 0;
    } @else {
      margin-left: 100% / $flexboxgrid-grid-columns * $i;
    }
  }
}

.flex-col {
  @include flex-grow(1);
  @include flex-basis(0);
  max-width: 100%;
}

.flex-start {
  @include justify-content(flex-start);
  text-align: left;
}

.flex-center {
  @include justify-content(center);
  text-align: center;
}

.flex-end {
  @include justify-content(flex-end);
  text-align: right;
}

.flex-top {
  @include align-items(flex-start);
}

.flex-middle {
  @include align-items(center);
}

.flex-bottom {
  @include align-items(flex-end);
}

.flex-around {
  @include justify-content(space-around);
}

.flex-between {
  @include justify-content(space-between);
}

.flex-first {
  order: -1;
}

.flex-last {
  order: 1;
}

@each $breakpoint in $flexboxgrid-breakpoints {
  $name: nth($breakpoint, 1);
  $size: nth($breakpoint, 2);

  @media #{$size} {
    .flex-col-#{$name} {
      @include flexboxgrid-sass-col-common;
      @include flex-basis(auto);
    }
    @for $i from 1 through $flexboxgrid-grid-columns {
      .flex-col-#{$name}-#{$i} {
        @include flexboxgrid-sass-col-common;
        @include flex-basis(100% / $flexboxgrid-grid-columns * $i);
        max-width: 100% / $flexboxgrid-grid-columns * $i;
      }
    }
    @for $i from 0 through $flexboxgrid-grid-columns {
      .flex-col-#{$name}-offset-#{$i} {
        @include flexboxgrid-sass-col-common;
        @if $i == 0 {
          margin-left: 0;
        } @else {
          margin-left: 100% / $flexboxgrid-grid-columns * $i;
        }
      }
    }
    .flex-col-#{$name} {
      @include flex-grow(1);
      @include flex-basis(0);
      max-width: 100%;
    }
    .flex-start-#{$name} {
      @include justify-content(flex-start);
      text-align: left;
    }

    .flex-center-#{$name} {
      @include justify-content(center);
      text-align: center;
    }

    .flex-end-#{$name} {
      @include justify-content(flex-end);
      text-align: right;
    }

    .flex-top-#{$name} {
      @include align-items(flex-start);
    }

    .flex-middle-#{$name} {
      @include align-items(center);
    }

    .flex-bottom-#{$name} {
      @include align-items(flex-end);
    }

    .flex-around-#{$name} {
      @include justify-content(space-around);
    }

    .flex-between-#{$name} {
      @include justify-content(space-between);
    }

    .flex-first-#{$name} {
      order: -1;
    }

    .flex-last-#{$name} {
      order: 1;
    }
  }
}
